{
  "api/BrazilModels.BrazilCulture.html": {
    "href": "api/BrazilModels.BrazilCulture.html",
    "title": "Class BrazilCulture | Brazil Models",
    "summary": "Class BrazilCulture Namespace BrazilModels Assembly BrazilModels.dll Lightweight Brazilian culture helpers public static class BrazilCulture Inheritance object BrazilCulture Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields CultureInfo Lightweight brazil culture info public static readonly CultureInfo CultureInfo Field Value CultureInfo DateTimeFormat Format Dates in pt-BR public static readonly DateTimeFormatInfo DateTimeFormat Field Value DateTimeFormatInfo NumberFormat NumberFormatInfo using ',' for decimal separators and '.' for group separators public static readonly NumberFormatInfo NumberFormat Field Value NumberFormatInfo"
  },
  "api/BrazilModels.BrazilExtensions.html": {
    "href": "api/BrazilModels.BrazilExtensions.html",
    "title": "Class BrazilExtensions | Brazil Models",
    "summary": "Class BrazilExtensions Namespace BrazilModels Assembly BrazilModels.dll Brazil extensions public static class BrazilExtensions Inheritance object BrazilExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ToBrazilMoneyString(decimal, bool) Return brazilian number as money-formatted text Use ',' for decimal separators and '.' for group separators public static string ToBrazilMoneyString(this decimal value, bool moneySuffix = true) Parameters value decimal moneySuffix bool Returns string ToBrazilString(decimal, string?) Return brazilian number-formatted text Use ',' for decimal separators and '.' for group separators public static string ToBrazilString(this decimal value, string? format = null) Parameters value decimal format string Returns string TryParseDecimalBrazil(string) Converts the string representation of a number to its Decimal equivalent. Use ',' for decimal separators and '.' for group separators public static decimal? TryParseDecimalBrazil(this string value) Parameters value string Returns decimal?"
  },
  "api/BrazilModels.Cnpj.html": {
    "href": "api/BrazilModels.Cnpj.html",
    "title": "Struct Cnpj | Brazil Models",
    "summary": "Struct Cnpj Namespace BrazilModels Assembly BrazilModels.dll Brazilian CNPJ number [JsonConverter(typeof(StringSystemTextJsonConverter<Cnpj>))] [TypeConverter(typeof(StringTypeConverter<Cnpj>))] public readonly struct Cnpj : IComparable<Cnpj>, IEquatable<CpfCnpj>, ISpanFormattable, IFormattable, ISpanParsable<Cnpj>, IParsable<Cnpj>, IUtf8SpanFormattable, IUtf8SpanParsable<Cnpj>, IEqualityOperators<Cnpj, Cnpj, bool>, IEqualityOperators<Cnpj, CpfCnpj, bool>, IEquatable<Cnpj> Implements IComparable<Cnpj> IEquatable<CpfCnpj> ISpanFormattable IFormattable ISpanParsable<Cnpj> IParsable<Cnpj> IUtf8SpanFormattable IUtf8SpanParsable<Cnpj> IEqualityOperators<Cnpj, Cnpj, bool> IEqualityOperators<Cnpj, CpfCnpj, bool> IEquatable<Cnpj> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Cnpj() Construct an Empty CNPJ public Cnpj() Cnpj(in long) Construct new CNPJ public Cnpj(in long value) Parameters value long A valid numeric CNPJ value Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. Cnpj(in ReadOnlySpan<char>) Construct a new CNPJ public Cnpj(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> A valid CNPJ as ReadOnlySpan of char Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. Cnpj(in string) Construct new CNPJ public Cnpj(in string value) Parameters value string A valid string CNPJ value Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. Fields DefaultLength CNPJ Size public const byte DefaultLength = 14 Field Value byte Mask CNPJ Mask public const string Mask = \"##.###.###/####-##\" Field Value string Properties Empty Empty invalid CNPJ public static Cnpj Empty { get; } Property Value Cnpj IsEmpty Returns true if is empty public bool IsEmpty { get; } Property Value bool Value CNPJ string representation public string Value { get; } Property Value string Methods CompareTo(Cnpj) public int CompareTo(Cnpj other) Parameters other Cnpj Returns int Equals(Cnpj) public bool Equals(Cnpj other) Parameters other Cnpj Returns bool Equals(CpfCnpj) public bool Equals(CpfCnpj other) Parameters other CpfCnpj Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Format(in ReadOnlySpan<char>, bool) Format Cnpj string. If given is smaller than expected, this function will pad the value with left 0. public static string Format(in ReadOnlySpan<char> value, bool withMask = false) Parameters value ReadOnlySpan<char> Cnpj string representation withMask bool if true, returns formatted Cnpj with mask (##.###.###/####-##), otherwise clean (##############). Returns string Formatted CNPJ string GetHashCode() public override int GetHashCode() Returns int Parse(long) Parses a number to Cnpj public static Cnpj Parse(long value) Parameters value long CNPJ long number Returns Cnpj Cnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is 0. Parse(ReadOnlySpan<byte>) Parses a UTF8 byte span to Cnpj public static Cnpj Parse(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> CNPJ UTF8 bytes Returns Cnpj Cnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(ReadOnlySpan<char>) Parses a char span to Cnpj public static Cnpj Parse(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> CNPJ string Returns Cnpj Cnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(string) Parses a string to Cnpj public static Cnpj Parse(string value) Parameters value string CNPJ string Returns Cnpj Cnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. ToNumber() Parse the digits to a numeric value public long ToNumber() Returns long long representation of CNPJ. ToString() Return a CNPJ string representation without special symbols public override string ToString() Returns string CNPJ as string ToString(bool) Return a CNPJ string representation public string ToString(bool withMask) Parameters withMask bool If true, returns CNPJ string with mask (eg. 00.000.000/0000-00) Returns string CNPJ as string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryParse(long, out Cnpj) Converts a numeric representation of a CNPJ to the equivalent Cnpj structure. public static bool TryParse(long value, out Cnpj result) Parameters value long A long containing the CNPJ value result Cnpj A Cnpj instance to contain the parsed value. If the method returns true, result contains a valid Cnpj. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(ReadOnlySpan<byte>, out Cnpj) Converts the UTF8 byte span representation of a CNPJ to the equivalent Cnpj structure. public static bool TryParse(ReadOnlySpan<byte> value, out Cnpj result) Parameters value ReadOnlySpan<byte> A UTF8 byte span containing the CNPJ to convert result Cnpj A Cnpj instance to contain the parsed value. If the method returns true, result contains a valid Cnpj. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(ReadOnlySpan<char>, out Cnpj) Converts the char span representation of a CNPJ to the equivalent Cnpj structure. public static bool TryParse(ReadOnlySpan<char> value, out Cnpj result) Parameters value ReadOnlySpan<char> A string containing the CNPJ to convert result Cnpj A Cnpj instance to contain the parsed value. If the method returns true, result contains a valid Cnpj. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(string?, out Cnpj) Converts the string representation of a CNPJ to the equivalent Cnpj structure. public static bool TryParse(string? value, out Cnpj result) Parameters value string A string containing the CNPJ to convert result Cnpj A Cnpj instance to contain the parsed value. If the method returns true, result contains a valid Cnpj. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. Validate(in ReadOnlySpan<char>) Validate given Cnpj public static bool Validate(in ReadOnlySpan<char> cnpjString) Parameters cnpjString ReadOnlySpan<char> Cnpj string representation Returns bool true if the validation was successful; otherwise, false. ValidateString(string) Validate given Cnpj public static bool ValidateString(string cnpjString) Parameters cnpjString string Cnpj string representation Returns bool true if the validation was successful; otherwise, false. Operators explicit operator long(in Cnpj) Convert CNPJ a numeric representation public static explicit operator long(in Cnpj value) Parameters value Cnpj A CNPJ structure Returns long CNPJ as long explicit operator Cnpj(in long) Convert CNPJ from number public static explicit operator Cnpj(in long value) Parameters value long A CNPJ numeric value Returns Cnpj CNPJ structure explicit operator Cnpj(in string) Try to parse a string to a valid Cnpj structure public static explicit operator Cnpj(in string value) Parameters value string CNPJ string Returns Cnpj Cnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CNPJ. implicit operator ReadOnlySpan<char>(in Cnpj) Convert CNPJ to ReadOnlySpan representation without a mask public static implicit operator ReadOnlySpan<char>(in Cnpj cnpj) Parameters cnpj Cnpj A CNPJ structure Returns ReadOnlySpan<char> CNPJ as string implicit operator string(in Cnpj) Convert CNPJ to string representation without a mask public static implicit operator string(in Cnpj cnpj) Parameters cnpj Cnpj A CNPJ structure Returns string CNPJ as string Explicit Interface Implementations operator ==(Cnpj, Cnpj) static bool operator ==(Cnpj left, Cnpj right) Parameters left Cnpj right Cnpj Returns bool operator ==(Cnpj, CpfCnpj) static bool operator ==(Cnpj left, CpfCnpj right) Parameters left Cnpj right CpfCnpj Returns bool operator !=(Cnpj, Cnpj) static bool operator !=(Cnpj left, Cnpj right) Parameters left Cnpj right Cnpj Returns bool operator !=(Cnpj, CpfCnpj) static bool operator !=(Cnpj left, CpfCnpj right) Parameters left Cnpj right CpfCnpj Returns bool"
  },
  "api/BrazilModels.Cpf.html": {
    "href": "api/BrazilModels.Cpf.html",
    "title": "Struct Cpf | Brazil Models",
    "summary": "Struct Cpf Namespace BrazilModels Assembly BrazilModels.dll Brazilian CPF number [JsonConverter(typeof(StringSystemTextJsonConverter<Cpf>))] [TypeConverter(typeof(StringTypeConverter<Cpf>))] public readonly struct Cpf : IComparable<Cpf>, IEquatable<CpfCnpj>, ISpanFormattable, IFormattable, ISpanParsable<Cpf>, IParsable<Cpf>, IUtf8SpanFormattable, IUtf8SpanParsable<Cpf>, IEqualityOperators<Cpf, Cpf, bool>, IEqualityOperators<Cpf, CpfCnpj, bool>, IEquatable<Cpf> Implements IComparable<Cpf> IEquatable<CpfCnpj> ISpanFormattable IFormattable ISpanParsable<Cpf> IParsable<Cpf> IUtf8SpanFormattable IUtf8SpanParsable<Cpf> IEqualityOperators<Cpf, Cpf, bool> IEqualityOperators<Cpf, CpfCnpj, bool> IEquatable<Cpf> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Cpf() Construct an Empty CPF public Cpf() Cpf(in long) Construct a new CPF public Cpf(in long value) Parameters value long A valid CPF a numeric value Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. Cpf(in ReadOnlySpan<char>) Construct a new CPF public Cpf(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> A valid CPF as ReadOnlySpan of char Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. Cpf(in string) Construct a new CPF public Cpf(in string value) Parameters value string A valid CPF as ReadOnlySpan of char Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. Fields DefaultLength CPF Size public const byte DefaultLength = 11 Field Value byte Mask CPF Mask public const string Mask = \"###.###.###-##\" Field Value string Properties Empty Empty invalid CPF public static Cpf Empty { get; } Property Value Cpf IsEmpty Returns true if is empty public bool IsEmpty { get; } Property Value bool Value CPF string representation public string Value { get; } Property Value string Methods CompareTo(Cpf) public int CompareTo(Cpf other) Parameters other Cpf Returns int Equals(Cpf) public bool Equals(Cpf other) Parameters other Cpf Returns bool Equals(CpfCnpj) public bool Equals(CpfCnpj other) Parameters other CpfCnpj Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Format(in ReadOnlySpan<char>, bool) Format Cpf string. If given is smaller than expected, this function will pad the value with left 0. public static string Format(in ReadOnlySpan<char> value, bool withMask = false) Parameters value ReadOnlySpan<char> Cpf string representation withMask bool if true, returns formatted Cpf with mask (##.###.###/####-##), otherwise clean (##############). Returns string Formatted CPF string GetHashCode() public override int GetHashCode() Returns int Parse(long) Parses a number to Cpf public static Cpf Parse(long value) Parameters value long CPF long number Returns Cpf Cpf structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. ArgumentNullException Throws an ArgumentNullException if the passed is 0. Parse(ReadOnlySpan<byte>) Parses a UTF8 byte span to CPF public static Cpf Parse(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> CPF UTF8 bytes Returns Cpf CPF structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(ReadOnlySpan<char>) Parses a char span to Cpf public static Cpf Parse(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> CPF string Returns Cpf Cpf structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(string) Parses a string to Cpf public static Cpf Parse(string value) Parameters value string CPF string Returns Cpf Cpf structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. ArgumentNullException Throws an ArgumentNullException if the passed is null. ToNumber() Parse the digits to a numeric value public long ToNumber() Returns long long representation of CPF. ToString() Return a CPF string representation without special symbols public override string ToString() Returns string CPF as string ToString(bool) Return a CPF string representation public string ToString(bool withMask) Parameters withMask bool If true, returns CPNJ string with mask (eg. 00.000.000/0000-00) Returns string CPF as string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryParse(long, out Cpf) Converts a numeric representation of a CPF to the equivalent Cpf structure. public static bool TryParse(long value, out Cpf result) Parameters value long A long containing the CPF value result Cpf A Cpf instance to contain the parsed value. If the method returns true, result contains a valid Cpf. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(ReadOnlySpan<byte>, out Cpf) Converts the UTF8 byte span representation of a CPF to the equivalent CPF structure. public static bool TryParse(ReadOnlySpan<byte> value, out Cpf result) Parameters value ReadOnlySpan<byte> A UTF8 byte span containing the CPF to convert result Cpf A CPF instance to contain the parsed value. If the method returns true, result contains a valid CPF. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(ReadOnlySpan<char>, out Cpf) Converts the string representation of a CPF to the equivalent Cpf structure. public static bool TryParse(ReadOnlySpan<char> value, out Cpf result) Parameters value ReadOnlySpan<char> A string containing the CPF to convert result Cpf A Cpf instance to contain the parsed value. If the method returns true, result contains a valid Cpf. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(string?, out Cpf) Converts the string representation of a CPF to the equivalent Cpf structure. public static bool TryParse(string? value, out Cpf result) Parameters value string A string containing the CPF to convert result Cpf A Cpf instance to contain the parsed value. If the method returns true, result contains a valid Cpf. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. Validate(in ReadOnlySpan<char>) Validate given Cpf public static bool Validate(in ReadOnlySpan<char> cpfString) Parameters cpfString ReadOnlySpan<char> Cpf string representation Returns bool true if the validation was successful; otherwise, false. ValidateString(string) Validate given Cpf public static bool ValidateString(string cpfString) Parameters cpfString string Cpf string representation Returns bool true if the validation was successful; otherwise, false. Operators explicit operator long(in Cpf) Convert CPF a numeric representation public static explicit operator long(in Cpf value) Parameters value Cpf A CPF structure Returns long CPF as long explicit operator Cpf(in long) Convert CPF from number public static explicit operator Cpf(in long value) Parameters value long A CPF numeric value Returns Cpf CPF structure explicit operator Cpf(in string) Try to parse a string to a valid Cpf structure public static explicit operator Cpf(in string value) Parameters value string CPF string Returns Cpf Cpf structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF. implicit operator ReadOnlySpan<char>(in Cpf) Convert CPF to ReadOnlySpan representation without a mask public static implicit operator ReadOnlySpan<char>(in Cpf value) Parameters value Cpf A CPF structure Returns ReadOnlySpan<char> CPF as string implicit operator string(in Cpf) Convert CPF to string representation without a mask public static implicit operator string(in Cpf value) Parameters value Cpf A CPF structure Returns string CPF as string Explicit Interface Implementations operator ==(Cpf, Cpf) static bool operator ==(Cpf left, Cpf right) Parameters left Cpf right Cpf Returns bool operator ==(Cpf, CpfCnpj) static bool operator ==(Cpf left, CpfCnpj right) Parameters left Cpf right CpfCnpj Returns bool operator !=(Cpf, Cpf) static bool operator !=(Cpf left, Cpf right) Parameters left Cpf right Cpf Returns bool operator !=(Cpf, CpfCnpj) static bool operator !=(Cpf left, CpfCnpj right) Parameters left Cpf right CpfCnpj Returns bool"
  },
  "api/BrazilModels.CpfCnpj.html": {
    "href": "api/BrazilModels.CpfCnpj.html",
    "title": "Struct CpfCnpj | Brazil Models",
    "summary": "Struct CpfCnpj Namespace BrazilModels Assembly BrazilModels.dll Brazilian CNPJ or CPF [JsonConverter(typeof(StringSystemTextJsonConverter<CpfCnpj>))] [TypeConverter(typeof(StringTypeConverter<CpfCnpj>))] public readonly struct CpfCnpj : IComparable<CpfCnpj>, IEquatable<Cpf>, IEquatable<Cnpj>, ISpanFormattable, IFormattable, ISpanParsable<CpfCnpj>, IParsable<CpfCnpj>, IUtf8SpanFormattable, IUtf8SpanParsable<CpfCnpj>, IEqualityOperators<CpfCnpj, CpfCnpj, bool>, IEqualityOperators<CpfCnpj, Cpf, bool>, IEqualityOperators<CpfCnpj, Cnpj, bool>, IEquatable<CpfCnpj> Implements IComparable<CpfCnpj> IEquatable<Cpf> IEquatable<Cnpj> ISpanFormattable IFormattable ISpanParsable<CpfCnpj> IParsable<CpfCnpj> IUtf8SpanFormattable IUtf8SpanParsable<CpfCnpj> IEqualityOperators<CpfCnpj, CpfCnpj, bool> IEqualityOperators<CpfCnpj, Cpf, bool> IEqualityOperators<CpfCnpj, Cnpj, bool> IEquatable<CpfCnpj> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors CpfCnpj() Construct an Empty CPF/CNPJ public CpfCnpj() CpfCnpj(in long, DocumentType) Construct new CpfCnpj public CpfCnpj(in long value, DocumentType type) Parameters value long A valid string CpfCnpj numeric value type DocumentType Document type Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. CpfCnpj(in ReadOnlySpan<char>) Construct a new CpfCnpj public CpfCnpj(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> A valid CPF/CNPJ as ReadOnlySpan of char Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. CpfCnpj(in string) Construct new CpfCnpj public CpfCnpj(in string value) Parameters value string A valid string CpfCnpj value Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. Properties Empty Empty invalid CpfCnpj public static CpfCnpj Empty { get; } Property Value CpfCnpj IsEmpty Returns true if is empty public bool IsEmpty { get; } Property Value bool Type Defines if the Document is an CPF or CNPJ public DocumentType Type { get; } Property Value DocumentType Value CPF/CNPJ string representation public string Value { get; } Property Value string Methods CompareTo(CpfCnpj) public int CompareTo(CpfCnpj other) Parameters other CpfCnpj Returns int Equals(Cnpj) public bool Equals(Cnpj other) Parameters other Cnpj Returns bool Equals(Cpf) public bool Equals(Cpf other) Parameters other Cpf Returns bool Equals(CpfCnpj) public bool Equals(CpfCnpj other) Parameters other CpfCnpj Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Format(in ReadOnlySpan<char>, bool) Format document string. If given is smaller than expected, this function will pad the value with left 0. public static string Format(in ReadOnlySpan<char> value, bool withMask = false) Parameters value ReadOnlySpan<char> Document string representation of CPF/CNPJ withMask bool if true, returns a formatted document with a mask Returns string Formatted CPF/CNPJ string Format(in ReadOnlySpan<char>, DocumentType?, bool) Format document string. If given is smaller than expected, this function will pad the value with left 0. public static string Format(in ReadOnlySpan<char> value, DocumentType? type, bool withMask = false) Parameters value ReadOnlySpan<char> Document string representation of CPF/CNPJ type DocumentType? Document Type withMask bool if true, returns a formatted document number with a mask Returns string Formatted CPF/CNPJ string GetHashCode() public override int GetHashCode() Returns int Parse(ReadOnlySpan<byte>) Parses a UTF8 byte span to CPF/CNPJ public static CpfCnpj Parse(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> CPF/CNPJ UTF8 bytes Returns CpfCnpj CPF structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(ReadOnlySpan<char>) Parses a string to CpfCnpj public static CpfCnpj Parse(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> CPF/CNPJ string Returns CpfCnpj CpfCnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. Parse(string) Parses a string to CpfCnpj public static CpfCnpj Parse(string value) Parameters value string CPF/CNPJ string Returns CpfCnpj CpfCnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. ArgumentNullException Throws an ArgumentNullException if the passed is null. ToNumber() Parse the digits to a numeric value public long ToNumber() Returns long long representation of CPF. ToString() Return a CPF/CNPJ string representation without special symbols public override string ToString() Returns string CPF/CNPJ as string ToString(bool) Return a CPF/CNPJ string representation public string ToString(bool withMask) Parameters withMask bool If true, returns CpfCnpj string with mask (eg. 00.000.000/0000-00) Returns string CPF/CNPJ as string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryParse(ReadOnlySpan<byte>, out CpfCnpj) Converts the UTF8 byte span representation of a CPF/CNPJ to the equivalent CpfCnpj structure. public static bool TryParse(ReadOnlySpan<byte> value, out CpfCnpj result) Parameters value ReadOnlySpan<byte> A UTF8 byte span containing the CPF/CNPJ to convert result CpfCnpj A CPF instance to contain the parsed value. If the method returns true, the result contains a valid CPF. If the method returns false,the result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(ReadOnlySpan<char>, out CpfCnpj) Converts the string representation of a brazilian document to the equivalent CpfCnpj structure. public static bool TryParse(ReadOnlySpan<char> value, out CpfCnpj result) Parameters value ReadOnlySpan<char> A string containing the CPF/CNPJ to convert result CpfCnpj A CpfCnpj instance to contain the parsed value. If the method returns true, result contains a valid CpfCnpj. If the method returns false, result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. TryParse(string?, out CpfCnpj) Converts the string representation of a brazilian document to the equivalent CpfCnpj structure. public static bool TryParse(string? value, out CpfCnpj result) Parameters value string A string containing the CPF/CNPJ to convert result CpfCnpj A CpfCnpj instance to contain the parsed value. If the method returns true, the result contains a valid CpfCnpj. If the method returns false, the result equals Empty. Returns bool true if the parse operation was successful; otherwise, false. Validate(in ReadOnlySpan<char>) Validate the given document number public static DocumentType? Validate(in ReadOnlySpan<char> cpfOrCnpj) Parameters cpfOrCnpj ReadOnlySpan<char> Cpf/Cnpj string representation Returns DocumentType? true if the validation was successful; otherwise, false. ValidateString(string) Validate the given document number public static DocumentType? ValidateString(string cpfOrCnpj) Parameters cpfOrCnpj string CPF/CNPJ string representation Returns DocumentType? true if the validation was successful; otherwise, false. Operators explicit operator long(in CpfCnpj) Convert CpfCnpj a numeric representation public static explicit operator long(in CpfCnpj value) Parameters value CpfCnpj A CpfCnpj structure Returns long CpfCnpj as long explicit operator CpfCnpj(in string) Try to parse a string to a valid CpfCnpj structure public static explicit operator CpfCnpj(in string value) Parameters value string CPF/CNPJ string Returns CpfCnpj CpfCnpj structure Exceptions FormatException Throws a FormatException if the passed is not a valid CPF/CNPJ. implicit operator CpfCnpj(in Cnpj) Convert Cnpj to CpfCnpj representation without a mask public static implicit operator CpfCnpj(in Cnpj cnpj) Parameters cnpj Cnpj A CPF/CNPJ structure Returns CpfCnpj The CPF/CNPJ as string implicit operator CpfCnpj(in Cpf) Convert Cpf to CpfCnpj representation without a mask public static implicit operator CpfCnpj(in Cpf cpf) Parameters cpf Cpf A CPF/CNPJ structure Returns CpfCnpj CPF/CNPJ as string implicit operator ReadOnlySpan<char>(in CpfCnpj) Convert CPF/CNPJ to ReadOnlySpan representation without a mask public static implicit operator ReadOnlySpan<char>(in CpfCnpj cpfCnpj) Parameters cpfCnpj CpfCnpj A CPF/CNPJ structure Returns ReadOnlySpan<char> CPF/CNPJ as string implicit operator string(in CpfCnpj) Convert document number to string representation without a mask public static implicit operator string(in CpfCnpj cpfCnpj) Parameters cpfCnpj CpfCnpj A CPF/CNPJ structure Returns string The CPF/CNPJ as string Explicit Interface Implementations operator ==(CpfCnpj, Cnpj) static bool operator ==(CpfCnpj left, Cnpj right) Parameters left CpfCnpj right Cnpj Returns bool operator ==(CpfCnpj, Cpf) static bool operator ==(CpfCnpj left, Cpf right) Parameters left CpfCnpj right Cpf Returns bool operator ==(CpfCnpj, CpfCnpj) static bool operator ==(CpfCnpj left, CpfCnpj right) Parameters left CpfCnpj right CpfCnpj Returns bool operator !=(CpfCnpj, Cnpj) static bool operator !=(CpfCnpj left, Cnpj right) Parameters left CpfCnpj right Cnpj Returns bool operator !=(CpfCnpj, Cpf) static bool operator !=(CpfCnpj left, Cpf right) Parameters left CpfCnpj right Cpf Returns bool operator !=(CpfCnpj, CpfCnpj) static bool operator !=(CpfCnpj left, CpfCnpj right) Parameters left CpfCnpj right CpfCnpj Returns bool"
  },
  "api/BrazilModels.DocumentType.html": {
    "href": "api/BrazilModels.DocumentType.html",
    "title": "Enum DocumentType | Brazil Models",
    "summary": "Enum DocumentType Namespace BrazilModels Assembly BrazilModels.dll Defines a generic Brazil document type public enum DocumentType Fields CNPJ = 1 Represent an CNPJ Document CPF = 2 Represent an CPF Document"
  },
  "api/BrazilModels.Email.html": {
    "href": "api/BrazilModels.Email.html",
    "title": "Struct Email | Brazil Models",
    "summary": "Struct Email Namespace BrazilModels Assembly BrazilModels.dll Basic strongly typed E-mail representation [JsonConverter(typeof(StringSystemTextJsonConverter<Email>))] [TypeConverter(typeof(StringTypeConverter<Email>))] public readonly struct Email : IComparable<Email>, ISpanFormattable, IFormattable, ISpanParsable<Email>, IParsable<Email>, IUtf8SpanFormattable, IUtf8SpanParsable<Email>, IEquatable<Email> Implements IComparable<Email> ISpanFormattable IFormattable ISpanParsable<Email> IParsable<Email> IUtf8SpanFormattable IUtf8SpanParsable<Email> IEquatable<Email> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Email(ReadOnlySpan<char>) Create a new email instance public Email(ReadOnlySpan<char> email) Parameters email ReadOnlySpan<char> Exceptions InvalidOperationException ArgumentNullException Email(string) Create a new email instance public Email(string email) Parameters email string Exceptions InvalidOperationException ArgumentNullException Properties IsEmpty Returns true if is empty public bool IsEmpty { get; } Property Value bool Value String representation of the Email public string Value { get; } Property Value string Methods CompareTo(Email) public int CompareTo(Email other) Parameters other Email Returns int Equals(Email) public bool Equals(Email other) Parameters other Email Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int IsValid(ReadOnlySpan<char>) Validate Email string public static bool IsValid(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Returns bool IsValid(string?) Validate Email string public static bool IsValid(string? value) Parameters value string Returns bool Parse(ReadOnlySpan<byte>) Parse an UTF8 byte span to an Email instance public static Email Parse(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> Returns Email Parse(ReadOnlySpan<char>) Parse a Value string to an Email instance public static Email Parse(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Returns Email Exceptions InvalidOperationException ArgumentNullException Parse(string) Parse a Value string to an Email instance public static Email Parse(string value) Parameters value string Returns Email Exceptions InvalidOperationException ArgumentNullException ToString() public override string ToString() Returns string TryParse(ReadOnlySpan<byte>, out Email) Try to parse a UTF8 byte span to an Email instance public static bool TryParse(ReadOnlySpan<byte> value, out Email result) Parameters value ReadOnlySpan<byte> result Email Returns bool TryParse(ReadOnlySpan<char>, out Email) Try to parse a char span to an Email instance public static bool TryParse(ReadOnlySpan<char> value, out Email email) Parameters value ReadOnlySpan<char> email Email Returns bool TryParse(string?, out Email) Try to parse a Value string to an Email instance public static bool TryParse(string? value, out Email email) Parameters value string email Email Returns bool Operators operator ==(Email, Email) public static bool operator ==(Email left, Email right) Parameters left Email right Email Returns bool explicit operator Email(string) Get Email instance of a Value string public static explicit operator Email(string value) Parameters value string Returns Email Exceptions InvalidOperationException ArgumentNullException implicit operator string(Email) Return string representation of Email public static implicit operator string(Email email) Parameters email Email Returns string operator !=(Email, Email) public static bool operator !=(Email left, Email right) Parameters left Email right Email Returns bool"
  },
  "api/BrazilModels.PhoneNumber.html": {
    "href": "api/BrazilModels.PhoneNumber.html",
    "title": "Struct PhoneNumber | Brazil Models",
    "summary": "Struct PhoneNumber Namespace BrazilModels Assembly BrazilModels.dll Basic strongly typed Phone number representation [JsonConverter(typeof(StringSystemTextJsonConverter<PhoneNumber>))] [TypeConverter(typeof(StringTypeConverter<PhoneNumber>))] public readonly struct PhoneNumber : IComparable<PhoneNumber>, ISpanFormattable, IFormattable, ISpanParsable<PhoneNumber>, IParsable<PhoneNumber>, IUtf8SpanFormattable, IUtf8SpanParsable<PhoneNumber>, IEquatable<PhoneNumber> Implements IComparable<PhoneNumber> ISpanFormattable IFormattable ISpanParsable<PhoneNumber> IParsable<PhoneNumber> IUtf8SpanFormattable IUtf8SpanParsable<PhoneNumber> IEquatable<PhoneNumber> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors PhoneNumber(ReadOnlySpan<char>) Create a new phone number instance public PhoneNumber(ReadOnlySpan<char> phoneNumber) Parameters phoneNumber ReadOnlySpan<char> Exceptions InvalidOperationException ArgumentNullException PhoneNumber(string) Create a new phone number instance public PhoneNumber(string phoneNumber) Parameters phoneNumber string Exceptions InvalidOperationException ArgumentNullException Properties IsEmpty Returns true if is empty public bool IsEmpty { get; } Property Value bool Value String representation of the Phone number public string Value { get; } Property Value string Methods CompareTo(PhoneNumber) public int CompareTo(PhoneNumber other) Parameters other PhoneNumber Returns int Equals(PhoneNumber) public bool Equals(PhoneNumber other) Parameters other PhoneNumber Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Format(in ReadOnlySpan<char>) Format Phone string. public static string Format(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Phone string representation Returns string Formatted Phone string GetHashCode() public override int GetHashCode() Returns int Parse(ReadOnlySpan<byte>) Parse an UTF8 byte span to a phoneNumber instance public static PhoneNumber Parse(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> Returns PhoneNumber Parse(ReadOnlySpan<char>) Parse a Value string to a phoneNumber instance public static PhoneNumber Parse(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Returns PhoneNumber Exceptions InvalidOperationException ArgumentNullException Parse(string) Parse a Value string to a phoneNumber instance public static PhoneNumber Parse(string value) Parameters value string Returns PhoneNumber Exceptions InvalidOperationException ArgumentNullException ToString() public override string ToString() Returns string TryParse(ReadOnlySpan<byte>, out PhoneNumber) Try to parse a Value string to a phoneNumber instance public static bool TryParse(ReadOnlySpan<byte> value, out PhoneNumber result) Parameters value ReadOnlySpan<byte> result PhoneNumber Returns bool TryParse(ReadOnlySpan<char>, out PhoneNumber) Try to parse a Value string to a phoneNumber instance public static bool TryParse(ReadOnlySpan<char> value, out PhoneNumber phoneNumber) Parameters value ReadOnlySpan<char> phoneNumber PhoneNumber Returns bool TryParse(string?, out PhoneNumber) Try to parse a Value string to a phoneNumber instance public static bool TryParse(string? value, out PhoneNumber phoneNumber) Parameters value string phoneNumber PhoneNumber Returns bool Operators operator ==(PhoneNumber, PhoneNumber) public static bool operator ==(PhoneNumber left, PhoneNumber right) Parameters left PhoneNumber right PhoneNumber Returns bool explicit operator PhoneNumber(string) Get phoneNumber instance of a Value string public static explicit operator PhoneNumber(string value) Parameters value string Returns PhoneNumber Exceptions InvalidOperationException ArgumentNullException implicit operator string(PhoneNumber) Return string representation of phoneNumber public static implicit operator string(PhoneNumber phoneNumber) Parameters phoneNumber PhoneNumber Returns string operator !=(PhoneNumber, PhoneNumber) public static bool operator !=(PhoneNumber left, PhoneNumber right) Parameters left PhoneNumber right PhoneNumber Returns bool"
  },
  "api/BrazilModels.html": {
    "href": "api/BrazilModels.html",
    "title": "Namespace BrazilModels | Brazil Models",
    "summary": "Namespace BrazilModels Classes BrazilCulture Lightweight Brazilian culture helpers BrazilExtensions Brazil extensions Structs Cnpj Brazilian CNPJ number Cpf Brazilian CPF number CpfCnpj Brazilian CNPJ or CPF Email Basic strongly typed E-mail representation PhoneNumber Basic strongly typed Phone number representation Enums DocumentType Defines a generic Brazil document type"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Brazil Models",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "BrazilModels | Brazil Models",
    "summary": "BrazilModels This library contains Models, Formatters and Validator for common Brazilian documents Getting started NuGet package available: $ dotnet add package BrazilModels Validation and Formatting Cpf using BrazilModels; Cpf.Validate(\"00123456797\"); // True Cpf.Validate(\"99912345606\"); // True Cpf.Validate(\"999.123.456-06\"); // True Cpf.Validate(\"00000000000\"); // False Cpf.Validate(\"invalid\"); // False Cpf.Format(\"99912345606\", withMask: true); // \"999.123.456-06\" Cpf.Format(\"319.818.120-83\", withMask: true); // \"319.818.120-83\" Cpf.Format(\"1234567890\", withMask: true); // \"012.345.678-90\" Cpf.Format(\"12345601\", withMask: true); // \"000.123.456-01\" Cpf.Format(\"319.818.120-83\"); // \"31981812083\" Cpf.Format(\"085.974.710-77\"); // \"08597471077\" Cpf.Format(\"08597471077\"); // \"08597471077\" Cpf.Format(\"12345601\"); // \"00012345601\" Cnpj using BrazilModels; Cnpj.Validate(\"49.020.406/0001-25\");// True Cnpj.Validate(\"49020406000125\"); // True Cnpj.Validate(\"invalid\"); // False Cnpj.Format(\"49020406000125\", withMask: true); // \"49.020.406/0001-25\" Cnpj.Format(\"49.020.406/0001-25\", withMask: true); // \"49.020.406/0001-25\" Cnpj.Format(\"1123456000101\", withMask: true); // \"01.123.456/0001-01\" Cnpj.Format(\"49020406000125\"); // \"49020406000125\" Cnpj.Format(\"49.020.406/0001-25\"); // \"49020406000125\" Cnpj.Format(\"01.123.456/0001-01\"); // \"1123456000101\" CpfCnpj (can be CPF or CNPJ) using BrazilModels; CpfCnpj.Validate(\"49.020.406/0001-25\");// True CpfCnpj.Validate(\"49020406000125\"); // True CpfCnpj.Validate(\"99912345606\"); // True CpfCnpj.Validate(\"999.123.456-06\"); // True CpfCnpj.Format(\"49020406000125\", withMask: true); // \"49.020.406/0001-25\" CpfCnpj.Format(\"99912345606\", withMask: true); // \"999.123.456-06\" CpfCnpj.Format(\"085.974.710-77\"); // \"08597471077\" CpfCnpj.Format(\"49.020.406/0001-25\"); // \"49020406000125\" Models You can use some value types defined in this lib to strongly type your domain: Cpf Cnpj CpfCnpj Email How to use it? var cpf = new Cpf(\"319.818.120-83\"); var cnpj = new Cnpj(\"49.020.406/0001-25\"); class Person { public Guid Id {get;init;} public Cpf Cpf {get;init;} public Email Email {get;init;} } class Company { public Guid Id {get;init;} public Cnpj Cnpj {get;init;} } Serialization This already contain converters for: System.Text.Json Swashbuckle.AspNetCore.Annotations System.ComponentModel.TypeConverter Using with EntityFramework You can easily define a ValueConverter for any of the types defined in this library as: public class YourDbContext : DbContext { protected override void OnModelCreating(ModelBuilder modelBuilder) { var cliente = modelBuilder.Entity<Person>(); cliente.Property(x => x.Cpf).HasConversion(t => t.Value, t => new(t)); cliente.Property(x => x.Email).HasConversion(t => t.Value, t => new(t)); } } Culture Info You can use BrazilCulture.CultureInfo as a light-weight alternative pt-BR culture. It formats as expected dates and decimal values."
  }
}